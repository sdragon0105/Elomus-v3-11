<div class="row-{{section.id}} {% if section.settings.fullwidth == true %}full-width{% endif  %}" data-section-id="{{ section.id }}">
  <div class="container">
    <div class="row">
      <div class="main-col col-sm-12 col-md-12">
        <div id="cmsblock-33" class="cmsblock">
          <div class='description'>
            <div class="our_story1 {% if section.settings.top_margin %} margin-top{% endif %}">
              <div class="static_video1">
                <div id="added_video1"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
{% schema %}
{
   "name": "Video Box Section",
   "settings": [
      {
         "type": "image_picker",
         "id": "image",
         "label": "Image",
         "info": "1920 x 650px recommended for preload image"
      },
      {
         "type": "select",
         "id": "video_type",
         "label": "Select video type",
         "options": [
            {
               "value": "youtube",
               "label": "Youtube"
            },
            {
               "value": "vimeo",
               "label": "Vimeo"
            },
            {
               "value": "mp4",
               "label": "Mp4"
            }
         ],
         "default": "youtube"
      },
      {
         "type": "text",
         "id": "video_src",
         "label": "Video Src",
         "default": "bLwl0gRbyrk",
         "info": "Add src id for youtube/vimeo and full link for video file"
      },
      {
         "type": "checkbox",
         "id": "video_autoplay",
         "label": "Autoplay",
         "default": true,
         "info": "If set to true, the preload image won't be shown. Autoplay with youtube/Vimeo still won't work as browsers don't allow autoplay anymore"
      },
	  {
         "type": "checkbox",
         "id": "fullwidth",
         "label": "Set Div fullwidth?",
         "default": true
      },
      {
        "type": "checkbox",
        "id": "top_margin",
        "label": "Add top margin?",
        "info": "White empty space above section",
        "default": false
      }
   ],
   "presets": [
      {
         "name": "VideoBox",
         "category": "Image"
      }
   ]
}
{% endschema %}

<!-- <script>
  let first_time = false;

  const observer111 = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const square111 = entry.target.querySelector('.added_video1');

      if (entry.isIntersecting ) {  //&& !first_time
        square111.setAttribute("src", "https://www.youtube.com/embed/{{section.settings.video_src}}?rel=0&autoplay=1&muted=1&loop=1&playsinline=1");
        first_time = true;
        return; // if we added the class, exit the function
      }

      // // We're not intersecting, so remove the class!
      // square111.setAttribute("src", "https://www.youtube.com/embed/{{ section.settings.video_src }}");
    });
  });

  observer111.observe(document.querySelector('.static_video1'));
</script> -->
<script>
// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement('script');
var video;
var play = false;

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var player;
function onYouTubeIframeAPIReady() {
  player = new YT.Player('added_video1', {
    height: '390',
    width: '640',
    videoId: 'M7lc1UVf-VE',
    playerVars: {
      'playsinline': 1
    },
    events: {
      'onReady': onPlayerReady,
    }
  });
}

// 4. The API will call this function when the video player is ready.
function onPlayerReady(event) {
  // event.target.playVideo();
  // console.log(event.target)
  video = event.target;
}

window.onscroll = function() {
    var hT = $('#added_video1').offset().top;
    var hH = $('#added_video1').outerHeight();
    var wH = $(window).height();
    var wS = $(this).scrollTop();

    if (wS > (hT+hH-wH) && !play){
      video.playVideo();
      play = true;
      console.log('asdf')
    }
  }
</script>