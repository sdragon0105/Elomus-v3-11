<!--Service Area Start-->
<div class="static1-elomus2">
  {% if section.settings.heading != blank %}
  <div class="module-title">
    {% if section.settings.description != blank %}
    <p class="sub-title">{{ section.settings.description }}</p>
    {% endif %}
    <h2 class="header-animation">{{ section.settings.heading }}</h2>
  </div>
  {% endif %}
  <div class="row feature-service--display">
    {% if section.blocks.size > 0 %}
    {% for block in section.blocks limit:6 %}
    <div class="col col-xs-12 item-animation-{{forloop.index}}">
      <div class="icon">
        {% if block.settings.use_feature_service_icon %}
          {% if block.settings.feature_service_icon != blank %}
          <i class="fa {{block.settings.feature_service_icon }}"></i>
          {% endif %}
        {% else %}
          {% if block.settings.image != blank %}
              <img {% if settings.lazyloading_enable %} class="lazyload" data-{% endif %}src="{{ block.settings.image | img_url: '60x60' }}" alt="" />
          {% endif %}
        {% endif %}
      </div>
      <h3 class="feature-service-title">{{ block.settings.feature_service_title }}</h3>
      <p class="feature-service-description" style="font-size: 22px;">{{ block.settings.feature_service_description }}</p>
    </div>
    {% endfor %}
    {% endif %}
  </div>
</div>

{% style %}
@media (prefers-reduced-motion: no-preference) {
  .module-title--animation {
    animation-name: example_;
    animation-duration: 4s;
    animation-delay: -2s;
  }
}
@keyframes example_ {
  50%  { left:-150px;}
  75%  { left:0px;}
}

@media (prefers-reduced-motion: no-preference) {
  .icon--animation {
    position: relative;
    animation-name: example_1;
    animation-duration: 4s;
    animation-delay: -2s;
  }
}
@keyframes example_1 {
  50%  { left:-300px;}
  75%  { left:0px;}
}
@media (prefers-reduced-motion: no-preference) {
  .title--animation {
    position: relative;
    animation-name: example_2;
    animation-duration: 4s;
    animation-delay: -2s;
  }
}
@keyframes example_2 {
  50%  { left:-600px;}
  75%  { left:0px;}
}
@media (prefers-reduced-motion: no-preference) {
  .description--animation {
    position: relative;
    animation-name: example_3;
    animation-duration: 4s;
    animation-delay: -2s;
  }
}
@keyframes example_3 {
  50%  { left:-800px;}
  75%  { left:0px;}
}
@media (prefers-reduced-motion: no-preference) {
  .title--animation1 {
    position: relative;
    animation-name: example_4;
    animation-duration: 4s;
    animation-delay: -2s;
  }
}
@keyframes example_4 {
  50%  { right:-600px;}
  75%  { right:0px;}
}
@media (prefers-reduced-motion: no-preference) {
  .description--animation1 {
    position: relative;
    animation-name: example_5;
    animation-duration: 4s;
    animation-delay: -2s;
  }
}
@keyframes example_5 {
  50%  { right:-800px;}
  75%  { right:0px;}
}
{% endstyle %}
<!--End of Service Area-->

<script>
const observer_0 = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    const square_ = entry.target.querySelector('.header-animation');

    if (entry.isIntersecting) {
      square_.classList.add('module-title--animation');
	    return; // if we added the class, exit the function
    }

    // We're not intersecting, so remove the class!
    square_.classList.remove('module-title--animation');
  });
});
observer_0.observe(document.querySelector('.module-title'));

for(var i=1; i<4; i++){
  const observer_icon = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const icon = entry.target.querySelector('.icon');
      if (entry.isIntersecting) {
        icon.classList.add('icon--animation');
        return; // if we added the class, exit the function
      }
      // We're not intersecting, so remove the class!
      icon.classList.remove('icon--animation');
    });
  });
  observer_icon.observe(document.querySelector('.item-animation-'+i));

  const observer_title = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const title = entry.target.querySelector('.feature-service-title');
      if (entry.isIntersecting) {
        title.classList.add('title--animation');
        return; // if we added the class, exit the function
      }
      // We're not intersecting, so remove the class!
      title.classList.remove('title--animation');
    });
  });
  observer_title.observe(document.querySelector('.item-animation-'+i));

  const observer_description = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const description = entry.target.querySelector('.feature-service-description');
      if (entry.isIntersecting) {
        description.classList.add('description--animation');
        return; // if we added the class, exit the function
      }
      // We're not intersecting, so remove the class!
      description.classList.remove('description--animation');
    });
  });
  observer_description.observe(document.querySelector('.item-animation-'+i));
}

for(var i=4; i<6; i++){
  const observer_icon = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const icon = entry.target.querySelector('.icon');
      if (entry.isIntersecting) {
        icon.classList.add('icon--animation');
        return; // if we added the class, exit the function
      }
      // We're not intersecting, so remove the class!
      icon.classList.remove('icon--animation');
    });
  });
  observer_icon.observe(document.querySelector('.item-animation-'+i));

  const observer_title = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const title = entry.target.querySelector('.feature-service-title');
      if (entry.isIntersecting) {
        title.classList.add('title--animation1');
        return; // if we added the class, exit the function
      }
      // We're not intersecting, so remove the class!
      title.classList.remove('title--animation1');
    });
  });
  observer_title.observe(document.querySelector('.item-animation-'+i));

  const observer_description = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      const description = entry.target.querySelector('.feature-service-description');
      if (entry.isIntersecting) {
        description.classList.add('description--animation1');
        return; // if we added the class, exit the function
      }
      // We're not intersecting, so remove the class!
      description.classList.remove('description--animation1');
    });
  });
  observer_description.observe(document.querySelector('.item-animation-'+i));
}

</script>